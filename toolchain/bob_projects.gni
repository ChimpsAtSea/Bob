extra_include_dirs = [ 
  ".",
  "//" ]

template("bob_library") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  target(bob_library_type, target_name) {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bob_static_library") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  static_library(target_name) {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bob_shared_library") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  shared_library(target_name) {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

bob_executable_config = get_path_info(":submodule_windows_ldconfig", "abspath")
template("bob_executable") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  executable(target_name) {
    configs += [ bob_executable_config ]
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

bob_console_config = get_path_info(":submodule_console_ldconfig", "abspath")
template("bob_console") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  executable(target_name) {
    configs += [ bob_console_config ]
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bob_source_set") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  source_set(target_name) {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bob_python") {
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.defines)) { invoker.defines = [] }

  invoker.include_dirs += extra_include_dirs
  invoker.defines += tag_configuration_defines
  
  source_set(target_name) {
    metadata = {}
    forward_variables_from(invoker, "*")
    metadata.custom_target_type = [ "python_library" ]
  }
}

template("bob_action") {
  if(!defined(invoker.args)) { invoker.args = [] }

  # GN Build Environment
  invoker.args += bob_python_forward_arguments


  action(target_name) {
    forward_variables_from(invoker, "*")
  }
}

#TODO: Does this make sense to keep inside of Bob? Should this be moved to BCS
template("bob_resources") {
  action(target_name) {
    forward_variables_from(invoker, [ "data_deps", "deps", "public_deps", "visibility", "metadata", "sources", "inputs", "outputs", "args" ])
    if (!defined(inputs)) { inputs = [] }
    if (!defined(args)) { args = [] }
    if (!defined(outputs)) { outputs = [] }

    script = "//toolchain/python/action_build_resources.py"

    # The script imports this Python file so we want to rebuild if it changes.
    inputs += [ ]
    
    # BCS Environment

    args += [
      "--bob-root-dir", rebase_path(bob_root_dir),
      "--bob-third-party-dir", rebase_path(bob_third_party_dir),
      "--bob-ewdk-dir", rebase_path(bob_ewdk_dir),
      "--bob-download-cache-dir", rebase_path(bob_download_cache_dir),
      "--bob-clang-frontend", rebase_path(bob_clang_frontend),
      "--bob-clang-flags", bob_clang_flags,
      "--target-os", target_os,
      "--target-config", target_config,
      "--target-link-config", target_link_config,
      "--target-cpu", target_cpu,
      "--target-src-dir", rebase_path("."),
      "--target-gen-dir", rebase_path(target_gen_dir),
      "--target-out-dir", rebase_path(target_out_dir),
      "--root-out_dir", rebase_path(root_out_dir),
      "--root-gen_dir", rebase_path(root_gen_dir),
      "--root-build_dir", rebase_path(root_build_dir) ]

    # Note that we have to manually pass the sources to our script if the
    # script needs them as inputs.
    args += [ "--outputs" ] +  rebase_path(outputs)
    args += [ "--inputs" ] + rebase_path(sources)
    args += [ "--sources" ] + sources
  }
}

#TODO: Does this make sense to keep inside of Bob? Should this be moved to BCS
template("bob_hlsl") {
  action(target_name) {
    forward_variables_from(invoker, [ "data_deps", "deps", "public_deps", "visibility", "metadata", "sources", "inputs", "outputs", "args" ])
    if (!defined(inputs)) { inputs = [] }
    if (!defined(args)) { args = [] }
    if (!defined(outputs)) { outputs = [] }

    script = "//toolchain/python/action_build_hlsl.py"

    # The script imports this Python file so we want to rebuild if it changes.
    inputs += [ ]
    
    # BCS Environment
    args += [
      "--bob_root_dir", rebase_path(bob_root_dir),
      "--bob_third_party_dir", rebase_path(bob_third_party_dir),
      "--bob_7z_dir", rebase_path(bob_7z_dir),
      "--bob_ewdk_dir", rebase_path(bob_ewdk_dir),
      "--bob_download_cache_dir", rebase_path(bob_download_cache_dir),
      "--target_os", target_os,
      "--target_config", target_config,
      "--target_link_config", target_link_config,
      "--target_cpu", target_cpu,
      "--target_src_dir", rebase_path("."),
      "--target_gen_dir", rebase_path(target_gen_dir),
      "--target_out_dir", rebase_path(target_out_dir),
      "--root_out_dir", rebase_path(root_out_dir),
      "--root_gen_dir", rebase_path(root_gen_dir),
      "--root_build_dir", rebase_path(root_build_dir) ]

    # Note that we have to manually pass the sources to our script if the
    # script needs them as inputs.
    args += [ "--outputs" ] +  rebase_path(outputs)
    args += [ "--inputs" ] + rebase_path(sources)
    args += [ "--sources" ] + sources
  }
}


# FIXME: Select the correct configuration
ida_sdk_config = "x64_win_vc_64"
template("bob_ida_plugin64")
{
  if(!defined(invoker.defines)) { invoker.defines = [] }
  if(!defined(invoker.include_dirs)) { invoker.include_dirs = [] }
  if(!defined(invoker.lib_dirs)) { invoker.lib_dirs = [] }
  if(!defined(invoker.libs)) { invoker.libs = [] }

  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }

  if (ida_sdk_installed) {
    shared_library(target_name)
    {
      metadata = {}
      output_name = target_name + "64"
      output_dir = "$root_out_dir/plugins"
      forward_variables_from(invoker, "*")
      defines += [ "_SILENCE_CXX20_IS_POD_DEPRECATION_WARNING" ] #TODO Your Ass, My Size-24 Hoof
      include_dirs += [ ida_sdk_dir + "/include" ]
      lib_dirs += [ ida_sdk_dir + "/lib/" + ida_sdk_config ]
      libs += [ "ida64.lib" ]
      #libs += [ "pro.lib" ]
    }
  } else {
    source_set(target_name)
    {
      metadata = {}
      forward_variables_from(invoker, "*")
    }
  }
}
