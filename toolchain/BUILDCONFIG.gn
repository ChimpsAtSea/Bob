
declare_args() {
  target_config = "debug"
  target_link_config = "dynamic"
  bob_root_dir = "//bob/"
  bob_project_root_dir = "//"
  bob_third_party_dir = "//bob/thirdparty"
  bob_download_cache_dir = "//bob/downloadcache"
  bob_ewdk_dir = "//bob/thirdparty/EWDK"
  llvm_dir = ""
  llvm_src_dir = ""
  llvm_bin_dir = ""
  llvm_clang = ""
  llvm_ar = ""
  llvm_ld = ""
  llvm_lld_link = ""
  llvm_wasm_ld = ""
  llvm_ld_lld = ""
  tag_configuration_triplets_concat = ""
}

not_needed([ 
  "llvm_dir_dir",
  "llvm_src_dir",
  "llvm_bin_dir",
  "llvm_clang",
  "llvm_ar",
  "llvm_ld",
  "llvm_lld_link" ])

tag_configuration_triplets = []
tag_configuration_defines = []
foreach(tag_configuration_triplet, string_split(tag_configuration_triplets_concat, ";")) {
  triplet = []
  triplet_object = {}

  triplet = string_split(tag_configuration_triplet, "-")
  define = "BOB_BUILD_HIGH_LEVEL_" + string_transform(triplet[0], "upper")
  triplet_object = { 
    engine = triplet[0]
    platform = triplet[1]
    build = triplet[2]
    define = define
    namespace = string_replace(tag_configuration_triplet, "-", "_")
  }
  
  tag_configuration_triplets += [triplet_object]
  tag_configuration_defines += [ define ]
}

#print(tag_configuration_triplets)
#print(tag_configuration_defines)

if (target_os == "") {
  target_os = host_os
}
if (target_cpu == "") {
  target_cpu = host_cpu
}
if (current_cpu == "") {
  current_cpu = target_cpu
}
if (current_os == "") {
  current_os = target_os
}

is_target_linux = current_os == "linux"
is_target_mac = current_os == "mac"
is_target_windows = current_os == "windows"
is_target_webassembly = current_os == "webassembly"
is_target_32bit = current_cpu == "x86" || current_cpu == "wasm32" || current_cpu == "arm"
is_target_64bit = !is_target_32bit
is_target_arm = current_cpu == "arm"
is_target_arm64 = current_cpu == "arm64"
is_target_arm_any = is_target_arm || is_target_arm64

is_host_windows = host_os == "win"
is_host_linux = host_os == "linux"

bob_library_type = "static_library"
bob_is_shared = false
bob_is_static = true
bob_is_profile = true
if(is_target_windows)
{
  if (target_link_config == "static")
  {
    bob_library_type = "static_library"
    bob_is_shared = false
    bob_is_static = true
    bob_is_profile = false
  }
  else if (target_link_config == "shared")
  {
    bob_library_type = "shared_library"
    bob_is_shared = true
    bob_is_static = false
    bob_is_profile = false
  }
  else if (target_link_config == "staticprofile")
  {
    bob_library_type = "static_library"
    bob_is_shared = false
    bob_is_static = true
    bob_is_profile = true
  }
  else if (target_link_config == "sharedprofile")
  {
    bob_library_type = "shared_library"
    bob_is_shared = true
    bob_is_static = false
    bob_is_profile = true
  }
  else
  {
    print("Unknown target_link_config " + target_link_config)
  }
}

# All binary targets will get this list of configs by default.
_shared_binary_target_configs = [ get_path_info(":compiler_defaults", "abspath") ]

# Apply that default list to the binary target types.
set_defaults("executable") {
  configs = _shared_binary_target_configs
  configs += [ get_path_info(":binary_library_ldconfig", "abspath") ]

  # Executables get this additional configuration.
  configs += [ get_path_info(":executable_ldconfig", "abspath") ]
}
set_defaults("static_library") {
  configs = _shared_binary_target_configs

  # Static libraries get this additional configuration.
  configs += [ get_path_info(":static_library_ldconfig", "abspath") ]
}
set_defaults("shared_library") {
  configs = _shared_binary_target_configs
  configs += [ get_path_info(":binary_library_ldconfig", "abspath") ]

  # Shared libraries get this additional configuration.
  configs += [ get_path_info(":shared_library_ldconfig", "abspath") ]
}
set_defaults("source_set") {
  configs = _shared_binary_target_configs
}

set_default_toolchain(get_path_info(":clang", "abspath"))
